<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <title>DXC</title>
    <script src="https://www.gstatic.com/firebasejs/8.0.2/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.2/firebase-auth.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.0.2/firebase-storage.js"></script>
    <script src="https://www.gstatic.com/firebasejs/7.19.1/firebase-database.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
</head>
<style>
    body{
        font-family: sans-serif;
    }
    .bg-image {
        position: absolute;
        top: 0px;
        left: 50%;
        transform: translateX(-50%);
        max-width: 1350px;
        min-width: 100%;
        z-index: 1;
        height: 100vh;
    }
    .text-center-flex { 
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        height: 100vh;
        text-align: center;
    }
    .slide {
        display: none;
    }
    .slide.active {
        display: block;
    }
    #cameraSelect {
        margin-bottom: 10px;
        display: none; /* Initially hidden */
    }
.slide2 >   #video {
        transform: scaleX(-1); /* Mirror the video horizontally */
    }

   .slide2 > video {
    object-fit: cover; /* Ensure the video covers the area without stretching */
    max-width: 100%; /* Prevents it from exceeding its container */
    height: auto; /* Adjust the height automatically */
}

.slide2 >  video,.slide2 >  canvas {
    width: 731px; /* Fixed 92dth */
    height: 388px; /* Fixed height */
    object-fit: cover; /* Ensure the video/canvas covers the area without stretching */
}
#video{
    
    transform: scaleX(-1); /* Flip the video horizontally */
    -webkit-transform: scaleX(-1); /* Ensure compatibility with older browsers */
}
#slide2{
    z-index: 10;
}
.loader-outer {
            display: none;
            z-index: 100;
            position: fixed;
            align-items: center;
            justify-content: center;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
            background: #4f178a;
            /* background: radial-gradient(circle, rgba(52,127,163,1) 0%, rgba(249,198,66,1) 100%); */
        }
        .loader {
            animation: rotate 1s infinite;
            height: 50px;
            width: 50px;
        }
        .loader:before,
        .loader:after {
            border-radius: 50%;
            content: '';
            display: block;
            height: 20px;
            width: 20px;
        }
        .loader:before {
            animation: ball1 1s infinite;
            background-color: #cb2025;
            box-shadow: 30px 0 0 #f8b334;
            margin-bottom: 10px;
        }
        .loader:after {
            animation: ball2 1s infinite;
            background-color: #00a096;
            box-shadow: 30px 0 0 #97bf0d;
        }
        @keyframes rotate {
            0% {
                -webkit-transform: rotate(0deg) scale(0.8);
                -moz-transform: rotate(0deg) scale(0.8);
            }
            50% {
                -webkit-transform: rotate(360deg) scale(1.2);
                -moz-transform: rotate(360deg) scale(1.2);
            }
            100% {
                -webkit-transform: rotate(720deg) scale(0.8);
                -moz-transform: rotate(720deg) scale(0.8);
            }
        }
        @keyframes ball1 {
            0% {
                box-shadow: 30px 0 0 #f8b334;
            }
            50% {
                box-shadow: 0 0 0 #f8b334;
                margin-bottom: 0;
                -webkit-transform: translate(15px, 15px);
                -moz-transform: translate(15px, 15px);
            }
            100% {
                box-shadow: 30px 0 0 #f8b334;
                margin-bottom: 10px;
            }
        }
        @keyframes ball2 {
            0% {
                box-shadow: 30px 0 0 #97bf0d;
            }
            50% {
                box-shadow: 0 0 0 #97bf0d;
                margin-top: -20px;
                -webkit-transform: translate(15px, 15px);
                -moz-transform: translate(15px, 15px);
            }
            100% {
                box-shadow: 30px 0 0 #97bf0d;
                margin-top: 0;
            }
        }
</style>
<body>
    <div class="w-100 loader-outer" id="loaderOuter">
        <div class="loader"></div>
        <h4 style="color:white">Loading..</h4>
    </div>
    <img class="bg-image" id="bg-image" src="https://firebasestorage.googleapis.com/v0/b/tieyoung-e964a.appspot.com/o/DXC%202024%2FNormal%20Photobooth%2FPhotobooth%20bg.jpg?alt=media&token=fc206bbf-56bf-4f3c-98ed-065a5032f1a8" alt="">
    <div id="main" class="container text-center-flex">
        
        <!-- First Slide: Start screen -->
        <div id="slide1" class="slide active" style="position: relative;width: 100vw;height: 100vh;">
            <!-- <h5>Be a part of Bhima Jewellers Logo Launch!</h5> -->
            <button class="btn btn-md btn-warning mt-3" style="position: absolute;
            top: 50%;
            left: 50%;
            width: 150px;
            padding: 10px;
            z-index: 1;
            transform: translateX(-50%);" id="start">Start</button>
        </div>

        <!-- Second Slide: Video capture -->
        <div id="slide2" class="slide p-2">
            <select id="cameraSelect" class="form-select"></select>
            <video id="video" style="width: 731px; height: 388px;" autoplay playsinline></video>
            <br>
            <br>
            <button class="btn btn-md btn-warning mt-3" id="snap">Capture Photo</button>
        </div>

        <canvas id="canvas" style="width: 731px; height: 388px;border-radius: 30px;display: none;"></canvas>

    </div>

    <script>
        // Firebase initialization
        var firebaseConfig = {
            apiKey: "AIzaSyDhyZp6xSQeZZBvKnPqkE5mwoUTDIiBjA0",
            authDomain: "userposts-64965.firebaseapp.com",
            projectId: "userposts-64965",
            storageBucket: "userposts-64965.appspot.com",
            messagingSenderId: "483796190733",
            appId: "1:483796190733:web:e29eef974a10885c427744",
            measurementId: "G-N8E9G16ELR"
        };
        firebase.initializeApp(firebaseConfig);
        const storage = firebase.storage();

        const video = document.getElementById('video');

        video.addEventListener('pause', (event) => {
    if (event.defaultPrevented) return; // Ignore if the event was already handled

    video.play(); // Resume playing immediately if it pauses unexpectedly
});

        const canvasphoto = document.getElementById('canvas');
        const contextphoto = canvasphoto.getContext('2d');
        

        const slide1 = document.getElementById('slide1');
        const slide2 = document.getElementById('slide2');
        const slide3 = document.getElementById('slide3');
        const slide4 = document.getElementById('slide4');

        const cameraSelect = document.getElementById('cameraSelect');
        const captureButton = document.getElementById('snap');
        let loader = document.getElementById('loaderOuter');
   
        function startCamera() {
            
            let currentStream;

            navigator.mediaDevices.enumerateDevices()
                .then(devices => {
                    const cameras = devices.filter(device => device.kind === 'videoinput');
                    cameras.forEach(camera => {
                        const option = document.createElement('option');
                        option.value = camera.deviceId;
                        option.text = camera.label || `Camera ${cameraSelect.length + 1}`;
                        cameraSelect.appendChild(option);
                    });
                    if (cameras.length > 0) {
                        switchCamera(cameras[0].deviceId);
                    }
                })
                .catch(error => {
                    console.error('Error enumerating devices:', error);
                });

            function switchCamera(deviceId) {
                if (currentStream) {
                    currentStream.getTracks().forEach(track => track.stop());
                }
                navigator.mediaDevices.getUserMedia({ video: { deviceId: deviceId, width: { ideal: 731}, height: { ideal: 388 } } })
                    .then(stream => {
                        video.srcObject = stream;
                        currentStream = stream;
                    })
                    .catch(error => {
                        console.error('Error switching camera:', error);
                    });
            }

            cameraSelect.addEventListener('change', () => {
                switchCamera(cameraSelect.value);
            });
        }

        captureButton.addEventListener('click', () => {
            const countdownElement = document.createElement('div');
            countdownElement.style.position = 'absolute';
            countdownElement.style.top = '50%';
            countdownElement.style.left = '50%';
            countdownElement.style.transform = 'translate(-50%, -50%)';
            countdownElement.style.fontSize = '5em';
            countdownElement.style.color = '#FFF';
            countdownElement.style.zIndex = '1000';
            document.body.appendChild(countdownElement);

            let countdown = 3;
            countdownElement.textContent = countdown;

            const countdownInterval = setInterval(() => {
                countdown--;
                
                if (countdown > 0 ) {
                    countdownElement.textContent = countdown;
                } else {
                    clearInterval(countdownInterval);
                    document.body.removeChild(countdownElement);
                    startCapture();
                }
            }, 1000);
        });

        function startCapture() {
    // Set the canvas size to match the video's display size (not its natural size)
    const videoStyles = window.getComputedStyle(video);
    const videoWidth = parseInt(videoStyles.getPropertyValue('width'));
    const videoHeight = parseInt(videoStyles.getPropertyValue('height'));

    canvasphoto.width = videoWidth ;
    canvasphoto.height = videoHeight;

    // Apply horizontal flip and draw the video frame to the canvasphoto
    contextphoto.save(); // Save the current contextphoto state
    contextphoto.scale(-1, 1); // Flip the contextphoto horizontally
    contextphoto.drawImage(video, -canvasphoto.width, 0, canvasphoto.width, canvasphoto.height); // Adjust the x position to match the flip
    contextphoto.restore(); // Restore the original context state

      // Go to the next slide to show the captured image



        // Upload photo
        loader.style.display = "flex"
            canvasphoto.toBlob(blob => {
                const storageRef = storage.ref();
                const photoRef = storageRef.child(`photos/${Date.now()}.jpg`);

                photoRef.put(blob).then(snapshot => {
                    snapshot.ref.getDownloadURL().then(url => {
                        fetch('/savePhoto', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ imageUrl: url, location: "", name: "" })
                        }).then(() => {
                            const socket = io();
                            let datatosend = {
                                url,
                                location : locationParam
                            }
                            // Show submission confirmation slide
                            console.log('in')
                            document.getElementById('mosaicCanvas').style.display = "block"
                            document.getElementById('slide2').style.display = "none"
                            document.getElementById('main').style.display = "none"
                            document.getElementById('bg-image').style.display = "none"
                            loader.style.display = "none"
                            socket.emit('newPhoto', datatosend);
                        });
                    });
                });
            });
        }

        // Home button: Refresh the page
        function showSlide(slide) {
        
            document.querySelectorAll('.slide').forEach(s => s.classList.remove('active'));
            slide.classList.add('active');
        }

        // Start button: Go to video capture slide
        document.getElementById('start').addEventListener('click', () => {
            showSlide(slide2);
            startCamera();
        });
    </script>

    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: black;
        }
        #mosaicCanvas{
            display: none;
            width: 100vw;
            height: 100vh;
        }
        /* #mosaicCanvas */
    </style>

<canvas id="mosaicCanvas"></canvas>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const canvas = document.getElementById('mosaicCanvas');
        const context = canvas.getContext('2d');
        const socket = io();

        let photoCount = 0;
        const maxPhotos = 1600;
        const gridSize = Math.ceil(Math.sqrt(maxPhotos));
        let photoSize = { width: canvas.width / gridSize, height: canvas.height / gridSize };
        let positions = [];
        let availablePositions = [];
        let usedPositions = new Set(); // Track used positions
        let drawnImages = []; // Array to store drawn image URLs and their positions

        // Adjust canvas size based on window size
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            photoSize = { width: canvas.width / gridSize, height: canvas.height / gridSize };

            // Reset and shuffle positions
            positions = [];
            availablePositions = [];
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    const pos = { x: i * photoSize.width, y: j * photoSize.height };
                    positions.push(pos);
                    availablePositions.push(pos);
                }
            }
            shuffleArray(availablePositions);
        }
        const locationParam = new URLSearchParams(window.location.search).get('location');

        // Shuffle function for randomizing positions
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
        }

        // Get a free position from available positions
        function getFreePosition() {
            while (availablePositions.length > 0) {
                const position = availablePositions.pop();
                if (!usedPositions.has(JSON.stringify(position))) {
                    usedPositions.add(JSON.stringify(position));
                    return position;
                }
            }
            return null; // No free position available
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Function to draw an image on the canvas with a gold overlay
        function drawImage(imageUrl, position) {
            const img = new Image();
            img.src = imageUrl;
            img.onload = () => {
                context.globalAlpha = 0.5;
                context.drawImage(img, position.x, position.y, photoSize.width, photoSize.height);
                // context.fillStyle = 'rgba(255,255,255, 0.5)'; // Gold color with 50% opacity
                // context.fillRect(position.x, position.y, photoSize.width, photoSize.height);
                context.globalAlpha = 1;
            };
        }

        // Function to redraw all images to preserve them
        function redrawAllImages() {
            const logo = new Image();
            logo.src = '/static/images/Mosaic Wall _ UTSAV logo-01 1.jpg';
            logo.onload = () => {
                context.globalAlpha = 0.9; // Adjust the opacity of the logo
                context.drawImage(logo, 0, 0, canvas.width, canvas.height);
                context.globalAlpha = 1; // Adjust the opacity of the logo
               
            };
            drawnImages.forEach(({ imageUrl, position }) => {
                drawImage(imageUrl, position);
            });
        }

        // Function to draw an image with zoom-out animation and gold overlay
        function drawImageWithAnimation(imageUrl) {
    const position = getFreePosition(); // Get a new free position
    if (!position) {
        redrawAllImages()
        console.error('No available positions left for new images.');
        return;
    }

    const img = new Image();
    img.src = imageUrl;
    img.onload = () => {
        const aspectRatio = img.width / img.height;

        // Calculate the final size based on the aspect ratio
        let finalWidth, finalHeight;
        if (aspectRatio >= 1) {
            finalWidth = photoSize.width;
            finalHeight = photoSize.width / aspectRatio;
        } else {
            finalWidth = photoSize.height * aspectRatio;
            finalHeight = photoSize.height;
        }

        // Start the image 5 times larger
        const startWidth = finalWidth * 5;
        const startHeight = finalHeight * 5;

        const startX = (canvas.width - startWidth) / 2;
        const startY = (canvas.height - startHeight) / 2;

        // Draw the image 5x larger and centered for 5 seconds
        context.clearRect(0, 0, canvas.width, canvas.height);
        context.drawImage(img, startX, startY, startWidth, startHeight);

        // Wait for 5 seconds before starting the zoom-out animation
        setTimeout(() => {
            const animationDuration = 1000; // 1 second
            const frameRate = 60; // Smoother animation
            const totalFrames = animationDuration / (1000 / frameRate);
            let currentFrame = 0;

            function animate() {
                context.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas

                // Interpolate the current size and position based on the frame
                const currentWidth = startWidth - (startWidth - finalWidth) * (currentFrame / totalFrames);
                const currentHeight = startHeight - (startHeight - finalHeight) * (currentFrame / totalFrames);
                const currentX = startX + (position.x - startX) * (currentFrame / totalFrames);
                const currentY = startY + (position.y - startY) * (currentFrame / totalFrames);

                // Draw the image at the interpolated size and position
                context.drawImage(img, currentX, currentY, currentWidth, currentHeight);

                currentFrame++;

                if (currentFrame < totalFrames) {
                    requestAnimationFrame(animate);
                } else {
                    // After the animation, clear the canvas and redraw all images
                    context.clearRect(0, 0, canvas.width, canvas.height);
                    redrawAllImages();

                    // Draw the final position of the new image with a gold overlay
                    drawImage(imageUrl, position);

                    // Store the drawn image URL and position
                    drawnImages.push({ imageUrl, position });
                    photoCount++;
                }
            }

            animate();
        }, 3000); // 5 seconds delay before starting the zoom-out animation
    };
}



       // Fetch stored photos and draw them on the canvas
        async function fetchAndDrawOldPhotos() {
            try {

                const locationParam = new URLSearchParams(window.location.search).get('location');
          
                console.log(locationParam, 'locationParam')
                const response = await fetch('/api/photos', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ location: locationParam})
                        });
                const photos = await response.json();
                console.log(photos)
                photos.forEach(photo => {
                    const position = getFreePosition();
                    if (position) {
                        // drawImage(photo.imageUrl, position);
                        drawnImages.push({ imageUrl: photo.imageUrl, position });
                        photoCount++;
                    }
                });
            } catch (error) {
                console.error('Error fetching photos:', error);
            }
        }

        // Fetch old photos on page load
        window.onload = fetchAndDrawOldPhotos;

        socket.on('updateCanvas'+locationParam, (imageUrl) => {
            drawImageWithAnimation(imageUrl.url);
        });

        // Function to fill remaining slots with images
        function fillRemainingSlots() {
            if (photoCount < maxPhotos) {
                const randomImageUrl = drawnImages[Math.floor(Math.random() * drawnImages.length)].imageUrl;
                const position = getFreePosition();
                if (position) {
                    drawImage(randomImageUrl, position);
                    requestAnimationFrame(fillRemainingSlots); // Continue filling slots with next frame
                } else {
                    drawLogo(); // Draw logo once all slots are filled
                }
            } else {
                drawLogo(); // Draw logo once all slots are filled
            }
        }

        // Function to draw the logo and gold overlay
        function drawLogo() {
            context.fillStyle = 'rgba(229,193,92, 0.7)'; // Gold color with 50% opacity
            context.fillRect(0, 0, canvas.width, canvas.height);

            const logo = new Image();
            logo.src = '/static/images/PhotoCollage.jpg';
            logo.onload = () => {
                context.globalAlpha = 1; // Adjust the opacity of the logo
                context.drawImage(logo, 0, 0, canvas.width, canvas.height);
                context.globalAlpha = 1;
            };
        }
        
        socket.on('revealLogo'+locationParam, () => {
            fillRemainingSlots(); // Start filling slots and then reveal the logo
        });

        socket.on('resetLogo'+locationParam, () => {
            console.log('reset')
            location.reload()// Start filling slots and then reveal the logo
        });
        console.log('resettest')
    </script>
</body>
</html> 